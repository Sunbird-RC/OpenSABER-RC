spring:
  profiles.active: default
---
spring:
  main:
    allow-bean-definition-overriding: true
  profiles: default
  servlet:
    multipart:
      enabled: true
      max-file-size: ${MAX_FILE_SIZE:5MB}
      max-request-size: ${MAX_REQUEST_SIZE:5MB}
  output:
    ansi:
      enabled: ALWAYS


oauth2:
  resource:
    - uri: ${oauth2_resource_uri:http://localhost:8080/auth/realms/sunbird-rc}
      email-path: ${oauth2_resource_email_path:email}
      consent-path: ${oauth2_resource_consent_path:consent}
      roles-path: ${oauth2_resource_roles_path:realm_access.roles}
      entity-path: ${oauth2_resource_entity_path:entity}
      user-id-path: ${oauth2_resource_user_id_path:sub}



name: default-yaml
environment: default

server:
  # Change this port number if you want to run it on another.
  port: 8081

notification:
  enabled: false
  url: http://localhost:8765/notification-service/v1/notification
  health-check-url: http://localhost:8765/notification-service/v1/health
  async-enabled: false
  topic: notify

invite:
  skip-required-validation: true
  skip-signature: true

cors:
  # By default, allowing all domains to access this service. Choose a particular domain,
  # in production. For example, http://otherservice.com:9090, to allow requests from otherservice.com.
  allowed-origin: '*'

perf:
  monitoring:
    enabled: false
registry:
  per-request:
    index-creation:
      enabled: ${registry_perRequest_indexCreation_enabled:true}
  base-apis:
    enabled: ${registry_base_apis_enable:false}
  external-entities: ${external_entities:}
  context:
    base: http://localhost:8081/
  system:
    base: http://localhost:8081/sunbirdrc/
  schema:
    url: http://localhost:8081/_schemas/
  attestation-policy:
    search-enabled: ${search_attestation_db:false}
    create-access: ${create_attestation_access_entities:User}
  hard-delete-enabled: ${hard_delete_enabled:false}
  expand-reference: ${expand_reference:false}

definitions:
  manager-type: ${manager_type:DefinitionsManager}

redis:
  host: redis
  port: 6379
workflow:
  enabled: ${workflow.enable:true}

view-template:
  decrypt-private-fields: false

async:
  enabled: false

event:
  enabled: false
  topic: events
  provider-name: ${event_providerName:dev.sunbirdrc.registry.service.impl.KafkaEventService}

kafka:
  bootstrap-address: kafka:9092
  create-entity-topic: create_entity
  post-create-entity-topic: post_create_entity

webhook:
  enabled: false
  url: http://localhost:5001/api/v1/callback

conditional-access:
  internal: _internal
  private: _private

# This property is to be used for search request/query
# offset: search result starts from value provided as default
# limits: search result to value provided as default
search:
  offset: 0
  limit: 2000
  # The search mechanism to use. Values could be either NativeSearchService or ElasticSearchService
  #   If NativeSearchService, then every search API uses the same database as the writes. May
  # not offer high speed reads. This is the default search service, if this config is not provided.
  #   If ElasticSearchService, then Elastic search is used.
  expand-internal: ${search_expandInternal:true}
  remove-non-public-fields-for-native-search: true
  provider-name: ${search_providerName:dev.sunbirdrc.registry.service.NativeSearchService}

# This property is to be used for read request
read:
  # The read mechanism to use, values could be either NativeReadService or ElasticReadService
  provider-name: dev.sunbirdrc.registry.service.NativeReadService

database:
  # This property is internal and not to be confused with the schema definition.
  # Clients use this property to perform read/update operation.
  # NOTE: Once a name is chosen it must not be changed, unless you're ready to let go the
  #       existing data in the database.
  uuid-property-name: ${database_uuidPropertyName:osid}

  # Providers available are NEO4J, SQLG, CASSANDRA, ORIENTDB, TINKERGRAPH (in-memory).
  # NOTE: Values given against 'shardId' must be unique
  provider: SQLG

  # Choose "none" as the propertyName if you don't want any shards. Otherwise
  # implement IShardAdvisor interface in your own ways. An example, SerialNumShardAdvisor
  # has been provided for reference. If you'd like to use it, set value "serialNum" here.
  # Note that "serialNum" must then be part of the payload.
  shard-property: ${database_shardProperty:none}

  # This property is instruction to use the shard advisor.
  # Values could be dev.sunbirdrc.registry.sink.shard.DefaultShardAdvisor, OR
  # dev.sunbirdrc.registry.sink.shard.SerialNumberShardAdvisor OR
  # absolute class name of your advisor class.
  # If this property not provided, advisor is set to DefaultShardAdvisor
  shard-advisor-class-name: dev.sunbirdrc.registry.sink.shard.DefaultShardAdvisor

  connection-info:
    - # shardId, shardlabel must be a unique identifier to each connection.
      shard-id: shard1

      # shardLabel is used as prefix for a uuid. Could be any alpha numeric string
      # Example of a record identifier: 1-60f76147-0acd-4dff-b75a-2d811787d04d
      # Note '1' is the label used for record identifier
      # shardLabel is not stored in the database
      shard-label: 1

      # The format of the URI can be learnt from the following links -
      #     * 1. Graph database (Neo4J)
      #     ** https://github.com/SteelBridgeLabs/neo4j-gremlin-bolt
      #     ** Example : bolt://localhost:7687
      #     * 2. Relational databases (Postgresql, HSQLDB, H2, MariaDB, MySQL, MSSQLServer)
      #     ** http://sqlg.org/docs/2.0.0-SNAPSHOT/
      #     ** Example - Postgres - jdbc:postgresql://localhost:5432/yourdb
      #     * 3. NoSQL  databases (Cassandra)
      #     ** Example - cassandra - jdbc:cassandra://localhost:9160/yourdb
      uri: ${connectionInfo_uri:jdbc:postgresql://localhost:5432/registry}

      username: ${connectionInfo_username:postgres}
      password: ${connectionInfo_password:postgres}
      max-pool-size: ${connectionInfo_maxPoolSize:200}

      # Any other shard information follows...
      #-
      #shardId: shard2
      #shardLabel: 2
      #uri: ${connectionInfo_uri:bolt://localhost:7688}
      #username: ${connectionInfo_username:neo4j}
      #password: ${connectionInfo_password:}

##################################################################################
# Uncomment the following section to use Cassandra as backend store              #
##################################################################################
cassandra:
  graph-factory: org.janusgraph.core.JanusGraphFactory
  backend: "cql"
  hostname: localhost
  keyspace: registry_db
  db-cache-size: 0.25
  # wait time in milliseconds to clean the cache
  db-cache-clean-wait: 60
  index:
    storage-backend: elasticsearch
    hostname: localhost

# File for framing the entity while reading
frame:
  file: frame.json
encryption:
  enabled: false
  health-check-url: http://localhost:8013/health
  url: ${encryption_uri:http://localhost:8013/crypto/v1/_encrypt}
  batch-url: ${encryption_batch_uri:http://localhost:8013/crypto/v1/_encrypt}
  method: Normal
  tenant-id: default
decryption:
  url: ${decryption_uri:http://localhost:8013/crypto/v1/_decrypt}
  batch-url: ${decryption_batch_uri:http://localhost:8013/crypto/v1/_decrypt}

certificate:
  enabled: false
  health-check-url: http://localhost:8078/health
  pdf-url: ${pdf_url:http://localhost:8078/api/v1/certificate}
template:
  base-url: http://localhost:8081/api/v1/templates/
  folder-path: public/_schemas/templates/
  external-enabled: ${enable_external_templates:false}

# This audit configuration will enable audit logging in the system, use audit_frame.json to create a schema for database /elastic storage.
#  data_store can have following values
#   * FILE     : Store the audit log in files.
#   * DATABASE : Store the audit log in primary database configured in database properties.
#   * ELASTIC  : Store the audit log in elastic search configured in elastic properties.
#  Note : Database Stores the created audit schema in audit_schema folder.
audit:
  enabled: true
  frame-store: DATABASE
  suffix: Audit
  suffix-separator: ${audit_suffixSeparator:_}

authentication:
  enabled: true

identity:
  provider-name: ${identity_provider:dev.sunbirdrc.auth.keycloak.KeycloakProviderImpl}
  url: ${sunbird_sso_url:http://localhost:8080/auth/}
  create-user-path: /admin/realms/sunbird-rc/users
  realm: ${sunbird_sso_realm:sunbird-rc}
  admin-client-id: ${sunbird_sso_admin_client_id:admin-api}
  admin-client-secret: ${sunbird_sso_admin_client_secret:xxx}
  set-default-password: ${sunbird_keycloak_user_set_password:false}
  default-password: ${sunbird_keycloak_user_password:abcd@123}
  user-actions:

claims:
  enabled: false
  url: http://localhost:8082

validation:
  enabled: true
  type: json

# Sets the service request and retry related configuration
service:
  connection:
    # Set the connection timeout for the underlying request configuration
    timeout: 5000
    # Set the timeout in milliseconds used when requesting a connection from the connection manager using the underlying request Configuration
    request:
      timeout: 5000
  # Set the socket read timeout for the underlying request configuration
  read:
    timeout: 5000
  retry:
    # The number of times an attempt must be made to reach to the service.
    max-attempts: ${service_retry_maxAttempts:5}
    backoff:
      # The fixed time interval, in milliseconds, between each such attempt.
      delay: 1000

http:
  max-connections: 100
# Sets the task-executor configuration for threads
task-executor:
  index:
    # Specify the prefix to use for the names of newly created threads.
    thread-pool-name: ${taskExecutor_index_threadPoolName:IndexThread-}
    # Set the ThreadPoolExecutor's core pool size.
    core-pool-size: ${taskExecutor_index_corePoolSize:2}
    # Set the ThreadPoolExecutor's maximum pool size.
    max-pool-size: ${taskExecutor_index_maxPoolSize:2}
    # Set the capacity for the ThreadPoolExecutor's BlockingQueue.
    queue-capacity: ${taskExecutor_index_queueCapacity:100}

# Sets the task-executor configuration for threads while auditing
audit-task-executor:
  # Specify the prefix to use for the names of newly created threads.
  thread-pool-name: ${auditTaskExecutor_threadPoolName:AuditThread-}
  # Set the ThreadPoolExecutor's core pool size.
  core-pool-size: ${auditTaskExecutor_corePoolSize:2}
  # Set the ThreadPoolExecutor's maximum pool size.
  max-pool-size: ${auditTaskExecutor_maxPoolSize:2}
  # Set the capacity for the ThreadPoolExecutor's BlockingQueue.
  queue-capacity: ${auditTaskExecutor_queueCapacity:100}

# elastic-search configuration details
elastic:
  search:
    # elastic-search connection info
    connection-url: localhost:9200
    add-shard-prefix: true
    #if authentication is enabled
    auth-enabled: false
    username: elastic
    password: elastic
    scheme: http
file-storage:
  enabled: false
  connection-url: http://localhost:9000
  access-key: XXXXX
  secret-key: XXXXX
  bucket-name: dummy

swagger:
  enabled: true
  title: Sunbird Registry and Credential
  description: Sunbird registry and credential api (SunbirdRC)
  version: 1.0.0

idgen:
  enabled: idgen_enabled:false
  tenant-id: default
  health-check-url: http://localhost:8088/egov-idgen/health
  generate-url: http://localhost:8088/egov-idgen/id/_generate
  id-format-url: http://localhost:8088/egov-idgen/id/_format/add

did:
  enabled: false
  health-check-url: http://localhost:3332/health
  generate-url: http://localhost:3332/did/generate
  resolve-url: http://localhost:3332/did/resolve/{id}

signature:
  enabled: false
  provider-name: dev.sunbirdrc.registry.service.impl.SignatureV1ServiceImpl
  v1:
    health-check-url: ${sign_health_check_url:http://localhost:8079/health}
    sign-url: ${sign_url:http://localhost:8079/sign}
    verify-url: ${verify_url:http://localhost:8079/verify}
    keys-url: ${keys_url:http://localhost:8013/keys/}
  v2:
    credential-did-method: rcw
    issuer-did-method: issuer
    health-check-url: http://localhost:3000/health
    issue-url: http://localhost:3000/credentials/issue
    get-url: http://localhost:3000/credentials/{id}
    delete-url: http://localhost:3000/credentials/{id}
    verify-url: http://localhost:3000/credentials/{id}/verify
    revocation-list-url: http://localhost:3000/credentials/revocation-list?issuerId={issuerDid}&page={page}&limit={limit}
    schema:
      author: Registry
      author-did-method: author
      health-check-url: http://localhost:3333/health
      create-url: http://localhost:3333/credential-schema
      update-url: http://localhost:3333/credential-schema/{id}/{version}
      get-by-id-and-version-url: http://localhost:3333/credential-schema/{id}/{version}
      search-by-tags-url: http://localhost:3333/credential-schema?tags={tags}

---
##################################################################
#                      TEST PROFILE                              #
##################################################################
spring:
  main:
    allow-bean-definition-overriding: true
  profiles: test
  output:
    ansi:
      enabled: ALWAYS
name: test-yaml
enviroment: test
workflow:
  enabled: true
view-template:
  decrypt-private-fields: false
notification:
  enabled: true
perf:
  monitoring:
    enabled: false

registry:
  context:
    base: http://example.com/voc/teacher/1.0.0/
  system:
    base: http://example.com/voc/opensaber/
  expand-reference: false
# This property is to be used for read request
read:
  # The read mechanism to use, values could be either NativeReadService or ElasticReadService
  provider-name: io.opensaber.registry.service.NativeReadService

database:
  # This property is internal. Clients use this property to perform read/update operation.
  # NOTE: Once a uuidPropertyName is chosen it must not be changed, unless you're ready to let go the
  #       existing data in the database.
  uuid-property-name: osid

  # Providers available are NEO4J, SQLG, TINKERGRAPH, CASSANDRA, ORIENTDB.
  # NOTE: Values given against 'shardId' must be unique
  provider: TINKERGRAPH

  # Choose "none" as the propertyName if you don't want any shards. Otherwise
  # implement IShardAdvisor interface in your own ways. An example, SerialNumShardAdvisor
  # has been provided for reference. If you'd like to use it, set value "serialNum" here.
  # Any other provider breaks the unit tests, needs a work-item
  shard-property: none

# File for framing the entity while reading
frame:
  file: frame.json

encryption:
  enabled: true
  url: https://dev.sunbirded.org/encryption/encrypt
  batch-url: https://dev.sunbirded.org/encryption/encrypt/obj

decryption:
  url: https://dev.sunbirded.org/encryption/decrypt
  batch-url: https://dev.sunbirded.org/encryption/decrypt/obj

signature:
  enabled: true
  provider: dev.sunbirdrc.registry.service.impl.SignatureV1ServiceImpl
  v1:
    health-check-url: https://dev.sunbirded.org/encryption/
    sign-url: https://dev.sunbirded.org/encryption/sign
    verify-url: https://dev.sunbirded.org/encryption/verify
    keys-url: https://dev.sunbirded.org/encryption/keys/


# These properties are used to enable the audit log
# enabled : should be true to enable audit log and false to disable audit log
# store : specifies the storage option is FILE or DATABASE
# suffix : specifies the suffix given for schema. If audit schema name is Teacher_Audit.json, the suffix is Audit.
# suffixSeperator : specifies the separator used between entity name and suffix. If audit schema name is Teacher_Audit.json, the suffixSeperator is _.

audit:
  enabled: false
  frame-store: DATABASE
  suffix: Audit
  suffix-separator: _

authentication:
  enabled: true

validation:
  enabled: true
  type: json

# Sets the service request and retry related configuration
service:
  connection:
    timeout: 5000
    request:
      timeout: 5000
  read:
    timeout: 5000
  retry:
    max-attempts: 5
    backoff:
      delay: 1000

# Sets the task-executor configuration for threads
task-executor:
  index:
    thread-pool-name: IndexThread-
    core-pool-size: 2
    max-pool-size: 2
    queue-capacity: 3

# Sets the task-executor configuration for threads while auditing
audit-task-executor:
  thread-pool-name: AuditThread-
  core-pool-size: 2
  max-pool-size: 2
  queue-capacity: 3

# elastic-search configuration details
elastic:
  search:
    connection-url: localhost:9200

certificate:
  enabled: true
