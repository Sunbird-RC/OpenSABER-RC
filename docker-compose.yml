version: '2.4'

services:
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.23
# Uncomment below lines and create es-data directory to persist elastic search data
#    volumes:
#      - ./${ES_DIR-es-data}:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - ELASTIC_PASSWORD=${ELASTIC_SEARCH_PASSWORD}
      - xpack.security.enabled=${ELASTIC_SECURITY_ENABLED-false}
    ports:
      - '9200:9200'
      - '9300:9300'
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          'localhost:9200/_cluster/health',
          '--header',
          'Authorization: Basic ZWxhc3RpYzpEa0llZFBQU0Ni',
        ]
      interval: 30s
      timeout: 10s
      retries: 4
  db:
    image: postgres
    volumes:
      - ./${DB_DIR-db-data}:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=registry
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
  registry:
    image: ghcr.io/sunbird-rc/sunbird-rc-core:${RELEASE_VERSION}
    volumes:
      - ./${SCHEMA_DIR-java/registry/src/main/resources/public/_schemas}:/home/sunbirdrc/config/public/_schemas
      - ./${VIEW_DIR-java/registry/src/main/resources/views}:/home/sunbirdrc/config/views/
    environment:
      - DATABASE_CONNECTION_INFO_0_URI=${DATABASE_URI-jdbc:postgresql://db:5432/registry}
      - DATABASE_CONNECTION_INFO_0_USERNAME=${DATABASE_USERNAME-postgres}
      - DATABASE_CONNECTION_INFO_0_PASSWORD=${DATABASE_PASSWORD-postgres}
      - DATABASE_CONNECTION_INFO_0_SHARD_ID=shardId1
      - DATABASE_CONNECTION_INFO_0_SHARD_LABEL=1
      - DATABASE_CONNECTION_INFO_0_MAX_POOL_SIZE=200
      - ENCRYPTION_ENABLED=${ENCRYPTION_ENABLED-false}
      - ENCRYPTION_HEALTH_CHECK_URL=http://encryption-service:8013/health
      - ENCRYPTION_URL=http://encryption-service:8013/crypto/v1/_encrypt
      - ENCRYPTION_BATCH_URL=http://encryption-service:8013/crypto/v1/_encrypt
      - DECRYPTION_URL=http://encryption-service:8013/crypto/v1/_decrypt
      - DECRYPTION_BATCH_URL=http://encryption-service:8013/crypto/v1/_decrypt
      - EVENT_ENABLED=${EVENT_ENABLED-false}
      - EVENT_TOPIC=events
      - EVENT_PROVIDER_NAME=dev.sunbirdrc.registry.service.impl.KafkaEventService
      - ELASTIC_SEARCH_CONNECTION_URL=${ELASTIC_SEARCH_CONNECTION_URL-es:9200}
      - ELASTIC_SEARCH_SCHEME=${ELASTIC_SEARCH_SCHEME-http}
      - ELASTIC_SEARCH_AUTH_ENABLED=${ELASTIC_SEARCH_AUTH_ENABLED-false}
      - ELASTIC_SEARCH_USERNAME=${ELASTIC_SEARCH_USERNAME-elastic}
      - ELASTIC_SEARCH_PASSWORD=${ELASTIC_SEARCH_PASSWORD}
      - SEARCH_PROVIDER_NAME=${SEARCH_PROVIDER_NAME-dev.sunbirdrc.registry.service.NativeSearchService}
      - OAUTH2_RESOURCE_0_URI=http://keycloak:8080/auth/realms/sunbird-rc
      - OAUTH2_RESOURCE_0_ROLES_PATH=realm_access.roles
      - AUTHENTICATION_ENABLED=${AUTHENTICATION_ENABLED-false}
      - IDENTITY_PROVIDER_NAME=${IDENTITY_PROVIDER_NAME-dev.sunbirdrc.auth.keycloak.KeycloakProviderImpl}
      - IDENTITY_REALM=${IDENTITY_REALM-sunbird-rc}
      - IDENTITY_URL=${IDENTITY_URL-http://keycloak:8080/auth}
      - IDENTITY_ADMIN_CLIENT_ID=${IDENTITY_ADMIN_CLIENT_ID-admin-api}
      - IDENTITY_ADMIN_CLIENT_SECRET=${IDENTITY_ADMIN_CLIENT_SECRET}
      - IDENTITY_SET_DEFAULT_PASSWORD=${IDENTITY_SET_DEFAULT_PASSWORD-true}
      - IDENTITY_DEFAULT_PASSWORD=${IDENTITY_DEFAULT_PASSWORD-abcd@123}
      - IDGEN_ENABLED=${IDGEN_ENABLED-false}
      - IDGEN_HEALTH_CHECK_URL=http://id-gen-service:8088/egov-idgen/health
      - IDGEN_GENERATE_URL=http://id-gen-service:8088/egov-idgen/id/_generate
      - IDGEN_ID_FORMAT_URL=http://id-gen-service:8088/egov-idgen/id/_format/add
      - CLAIMS_ENABLED=${CLAIMS_ENABLED-false}
      - CLAIMS_URL=http://claim-ms:8082
      - DID_ENABLED=${DID_ENABLED-false}
      - DID_HEALTH_CHECK_URL=http://identity:3332/health
      - DID_GENERATE_URL=http://identity:3332/did/generate
      - DID_RESOLVE_URL=http://identity:3332/did/resolve/{id}
      - SIGNATURE_ENABLED=${SIGNATURE_ENABLED-false}
      - SIGNATURE_PROVIDER_NAME=${SIGNATURE_PROVIDER_NAME-dev.sunbirdrc.registry.service.impl.SignatureV2ServiceImpl}
      - SIGNATURE_V2_CREDENTIAL_DID_METHOD=rcw
      - SIGNATURE_V2_ISSUER_DID_METHOD=issuer
      - SIGNATURE_V2_SCHEMA_AUTHOR=Registry
      - SIGNATURE_V2_SCHEMA_AUTHOR_DID_METHOD=author
      - SIGNATURE_V2_HEALTH_CHECK_URL=http://credential:3000/health
      - SIGNATURE_V2_ISSUE_URL=http://credential:3000/credentials/issue
      - SIGNATURE_V2_GET_URL=http://credential:3000/credentials/{id}
      - SIGNATURE_V2_DELETE_URL=http://credential:3000/credentials/{id}
      - SIGNATURE_V2_VERIFY_URL=http://credential:3000/credentials/{id}/verify
      - SIGNATURE_V2_VERIFY_ANY_URL=http://credential:3000/credentials/verify
      - SIGNATURE_V2_REVOCATION_LIST_URL=http://credential:3000/credentials/revocation-list?issuerId={issuerDid}&page={page}&limit={limit}
      - SIGNATURE_V2_SCHEMA_HEALTH_CHECK_URL=http://credential-schema:3333/health
      - SIGNATURE_V2_SCHEMA_CREATE_URL=http://credential-schema:3333/credential-schema
      - SIGNATURE_V2_SCHEMA_UPDATE_URL=http://credential-schema:3333/credential-schema/{id}/{version}
      - SIGNATURE_V2_SCHEMA_GET_BY_ID_AND_VERSION_URL=http://credential-schema:3333/credential-schema/{id}/{version}
      - SIGNATURE_V2_SCHEMA_SEARCH_BY_TAGS_URL=http://credential-schema:3333/credential-schema?tags={tags}
      - SIGNATURE_V1_SIGN_URL=http://certificate-signer:8079/sign
      - SIGNATURE_V1_VERIFY_URL=http://certificate-signer:8079/verify
      - SIGNATURE_V1_HEALTH_CHECK_URL=http://certificate-signer:8079/health
      - CERTIFICATE_ENABLED=${CERTIFICATE_ENABLED-false}
      - CERTIFICATE_PDF_URL=http://certificate-api:8078/api/v1/certificatePDF
      - CERTIFICATE_HEALTH_CHECK_URL=http://certificate-api:8078/health
      - TEMPLATE_BASE_URL=http://registry:8081/api/v1/templates/ #Looks for certificate templates for pdf copy of the signed certificate
      - TEMPLATE_EXTERNAL_ENABLED=${TEMPLATE_EXTERNAL_ENABLED-false}
      - FILE_STORAGE_ENABLED=${FILE_STORAGE_ENABLED-false}
      - FILE_STORAGE_CONNECTION_URL=http://file-storage:9000
      - FILE_STORAGE_ACCESS_KEY=admin
      - FILE_STORAGE_SECRET_KEY=12345678
      - FILE_STORAGE_BUCKET_NAME=issuance
      - REGISTRY_BASE_APIS_ENABLED=false
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=INFO
      - ASYNC_ENABLED=${ASYNC_ENABLED-false}
      - KAFKA_BOOTSTRAP_ADDRESS=kafka:9092
      - WEBHOOK_ENABLED=false
      - WEBHOOK_URL=http://localhost:5001/api/v1/callback
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEFINITIONS_MANAGER_TYPE=${DEFINITIONS_MANAGER_TYPE-DefinitionsManager}
      - REGISTRY_EXPAND_REFERENCE=${REGISTRY_EXPAND_REFERENCE-false}
      - SWAGGER_TITLE=${SWAGGER_TITLE-Sunbird Registry and Credential}
      - NOTIFICATION_ENABLED=${NOTIFICATION_ENABLED-false}
      - NOTIFICATION_ASYNC_ENABLED=${NOTIFICATION_ASYNC_ENABLED-false}
      - NOTIFICATION_HEALTH_CHECK_URL=http://notification-ms:8765/notification-service/v1/health
      - NOTIFICATION_URL=http://notification-ms:8765/notification-service/v1/notification
    ports:
      - '8081:8081'
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -nv -t1 --spider http://localhost:8081/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 10
  keycloak:
    image: ghcr.io/sunbird-rc/sunbird-rc-keycloak:latest
    volumes:
      - ./${KEYCLOAK_IMPORT_DIR-imports}:/opt/jboss/keycloak/imports
    environment:
      - KEYCLOAK_LOGO=https://svgshare.com/i/hCs.svg
      - DB_VENDOR=postgres
      - DB_ADDR=db
      - DB_PORT=5432
      - DB_DATABASE=registry
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - KEYCLOAK_USER=${KEYCLOAK_ADMIN_USER-admin}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD-admin}
      - KEYCLOAK_IMPORT=/opt/jboss/keycloak/imports/realm-export.json
      - PROXY_ADDRESS_FORWARDING=true
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9990/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - '8080:8080'
      - '9990:9990'
    depends_on:
      db:
        condition: service_healthy
  claim-ms:
    image: ghcr.io/sunbird-rc/sunbird-rc-claim-ms:${RELEASE_VERSION}
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/registry
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - REGISTRY_URL=http://registry:8081
      - UUID_PROPERTY_NAME=osid
    ports:
      - '8082:8082'
    depends_on:
      db:
        condition: service_started
      registry:
        condition: service_started
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -nv -t1 --spider http://localhost:8082/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 10
  vault:
    image: vault:1.13.3
    restart: always
    volumes:
      - ./vault.json:/vault/config/vault.json
      - ./vault-data:/vault/file
    environment:
      - VAULT_ADDR=${VAULT_ADDR}
      - VAULT_API_ADDR=${VAULT_API_ADDR}
      - VAULT_ADDRESS=${VAULT_ADDRESS}
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault.json
    ports:
      - 8200:8200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --spider http://127.0.0.1:8200/v1/sys/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
  identity:
    image: ghcr.io/sunbird-rc/sunbird-rc-identity-service:${RELEASE_VERSION}
    ports:
      - "3332:3332"
    depends_on:
      vault:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/registry
      - VAULT_ADDR=${VAULT_ADDR}
      - VAULT_TOKEN=${VAULT_TOKEN}
      - VAULT_BASE_URL=${VAULT_BASE_URL}
      - VAULT_ROOT_PATH=${VAULT_ROOT_PATH}
      - VAULT_TIMEOUT=${VAULT_TIMEOUT}
      - VAULT_PROXY=${VAULT_PROXY}
      - SIGNING_ALGORITHM=${SIGNING_ALGORITHM}
      - JWKS_URI=${JWKS_URI}
      - ENABLE_AUTH=${ENABLE_AUTH}
      - WEB_DID_BASE_URL=${WEB_DID_BASE_URL}
    healthcheck:
      test:
        [ "CMD-SHELL", "curl -f http://localhost:3332/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
  credential-schema:
    image: ghcr.io/sunbird-rc/sunbird-rc-credential-schema:${RELEASE_VERSION}
    ports:
      - "3333:3333"
    depends_on:
      db:
        condition: service_healthy
      identity:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/registry
      - IDENTITY_BASE_URL=${IDENTITY_BASE_URL}
      - JWKS_URI=${JWKS_URI}
      - ENABLE_AUTH=${ENABLE_AUTH}
    healthcheck:
      test:
        [ "CMD-SHELL", "curl -f http://localhost:3333/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
  credential:
    image: ghcr.io/sunbird-rc/sunbird-rc-credentials-service:${RELEASE_VERSION}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      identity:
        condition: service_healthy
      credential-schema:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/registry
      - IDENTITY_BASE_URL=${IDENTITY_BASE_URL}
      - SCHEMA_BASE_URL=${SCHEMA_BASE_URL}
      - CREDENTIAL_SERVICE_BASE_URL=${CREDENTIAL_SERVICE_BASE_URL}
      - JWKS_URI=${JWKS_URI}
      - ENABLE_AUTH=${ENABLE_AUTH}
      - QR_TYPE=${QR_TYPE}
    healthcheck:
      test:
        [ "CMD-SHELL", "curl -f http://localhost:3000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
  file-storage:
    image: quay.io/minio/minio
    volumes:
      - ${HOME}/minio/data:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=12345678
    command: server --address 0.0.0.0:9000 --console-address 0.0.0.0:9001 /data
    ports:
      - '9000:9000'
      - '9001:9001'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 10
  notification-ms:
    image: ghcr.io/sunbird-rc/sunbird-rc-notification-service:${RELEASE_VERSION}
    ports:
      - '8765:8765'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -nv -t1 --spider
          http://localhost:8765/notification-service/v1/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      - TRACK_NOTIFICATIONS=${TRACK_NOTIFICATIONS-false}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS-kafka:9092}
    depends_on:
      kafka:
        condition: service_started
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_TICK_TIME: '2000'
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: '1'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:9092,OUTSIDE://localhost:9094'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
    healthcheck:
      test:
        [
          'CMD',
          'kafka-topics',
          '--list',
          '--bootstrap-server',
          'localhost:9092',
        ]
      interval: 30s
      timeout: 10s
      retries: 10
  public-key-service:
    image: ghcr.io/sunbird-rc/sunbird-rc-public-key-service
    environment:
      - CONFIG_BASE_PATH=/etc/keys
    ports:
      - '3300:3300'
    healthcheck:
      test:
        ['CMD', 'curl', '-f', 'localhost:3300/public-key-service/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - ./imports:/etc/keys
  context-proxy-service:
    image: ghcr.io/sunbird-rc/sunbird-rc-context-proxy-service
    ports:
      - '4400:4400'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'localhost:4400/health']
      interval: 30s
      timeout: 10s
      retries: 10
  nginx:
    image: ghcr.io/sunbird-rc/sunbird-rc-nginx
    ports:
      - '80:80'
    depends_on:
      registry:
        condition: service_healthy
      context-proxy-service:
        condition: service_started
      public-key-service:
        condition: service_started
      keycloak:
        condition: service_started
      claim-ms:
        condition: service_started
      file-storage:
        condition: service_started
    healthcheck:
      test: ['CMD', 'curl', '-f', 'localhost:80']
      interval: 30s
      timeout: 10s
      retries: 10
  metrics:
    image: ghcr.io/sunbird-rc/sunbird-rc-metrics
    environment:
      CLICK_HOUSE_URL: clickhouse:9000
      CLICKHOUSE_DATABASE: default
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_METRICS_TOPIC: events
      REDIS_URL: redis:6379
    ports:
      - '8070:8070'
    depends_on:
      kafka:
        condition: service_healthy
      registry:
        condition: service_healthy
  redis:
    image: redis:latest
    ports:
      - '6379:6379'
  digilocker-certificate-api:
    image: ghcr.io/sunbird-rc/sunbird-rc-digilocker-certificate-api
    volumes:
      - ./services/digilocker-certificate-api/config/:/go/config/
    ports:
      - '8087:8087'
    environment:
      KEYCLOAK_CLIENT_ID: admin-api
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_SECRET}
      DIGILOCKER_HMAC_AUTHKEY: ${DIGILOCKER_HMAC_AUTHKEY}
      DIGILOCKER_AUTH_KEYNAME: x-digilocker-hmac
      PORT: 8087
  bulk_issuance:
    image: ghcr.io/sunbird-rc/sunbird-rc-bulk-issuance
    ports:
      - '5665:5665'
    environment:
      REGISTRY_BASE_URL: http://registry:8081/
      DATABASE_HOST: db
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
  clickhouse:
    image: clickhouse/clickhouse-server:23.4.2.11-alpine
    ports:
      - '9002:9000'
    healthcheck:
      test:
        wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit
        1
  id-gen-service:
    image: ghcr.io/sunbird-rc/id-gen-service:${RELEASE_VERSION}
    ports:
      - '8088:8088'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/registry
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_FLYWAY_URL=jdbc:postgresql://db:5432/registry
      - SPRING_FLYWAY_USERNAME=postgres
      - SPRING_FLYWAY_PASSWORD=postgres
      - SPRING_FLYWAY_TABLE=flyway_idgen_history
      - SPRING_FLYWAY_BASELINE_ON_MIGRATE=true
      - AUTOCREATE_NEW_SEQ=true
      - IDFORMAT_FROM_MDMS=false
      - EGOV_MDMS_PROVIDER=org.egov.id.masterdata.provider.DBMasterDataProvider
    depends_on:
      db:
        condition: service_healthy
  encryption-service:
    image: ghcr.io/sunbird-rc/encryption-service:${RELEASE_VERSION}
    ports:
      - '8013:8013'
    environment:
      - SERVER_PORT=8013
      - SERVER_SERVLET_CONTEXT_PATH=/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/registry
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_FLYWAY_URL=jdbc:postgresql://db:5432/registry
      - SPRING_FLYWAY_USERNAME=postgres
      - SPRING_FLYWAY_PASSWORD=postgres
      - SPRING_FLYWAY_TABLE=flyway_encryption_history
      - SPRING_FLYWAY_BASELINE_ON_MIGRATE=true
      - EGOV_MDMS_PROVIDER=org.egov.enc.masterdata.provider.DBMasterDataProvider
      - MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/
    depends_on:
      db:
        condition: service_healthy
